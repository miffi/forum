// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: queries.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO users (name, password_hash, is_administrator)
VALUES ($1, $2, $3)
`

type CreateUserParams struct {
	Name            string
	PasswordHash    string
	IsAdministrator pgtype.Bool
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.Exec(ctx, createUser, arg.Name, arg.PasswordHash, arg.IsAdministrator)
	return err
}

const getPost = `-- name: GetPost :one
SELECT posts.title, users.name FROM posts JOIN users ON users.user_id = comments.user_id
WHERE post_id = $1
`

type GetPostRow struct {
	Title string
	Name  string
}

func (q *Queries) GetPost(ctx context.Context, postID int64) (GetPostRow, error) {
	row := q.db.QueryRow(ctx, getPost, postID)
	var i GetPostRow
	err := row.Scan(&i.Title, &i.Name)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT name, is_administrator, created_on FROM users
WHERE name = $1
`

type GetUserRow struct {
	Name            string
	IsAdministrator pgtype.Bool
	CreatedOn       pgtype.Date
}

func (q *Queries) GetUser(ctx context.Context, name string) (GetUserRow, error) {
	row := q.db.QueryRow(ctx, getUser, name)
	var i GetUserRow
	err := row.Scan(&i.Name, &i.IsAdministrator, &i.CreatedOn)
	return i, err
}

const listComments = `-- name: ListComments :many
SELECT comment_id, users.name, body, created_at FROM comments JOIN users ON users.user_id = comments.user_id
WHERE post_id = $1 AND created_at < $2
ORDER BY created_at DESC
LIMIT $3
`

type ListCommentsParams struct {
	PostID    pgtype.Int8
	CreatedAt pgtype.Timestamp
	Limit     int32
}

type ListCommentsRow struct {
	CommentID int64
	Name      string
	Body      string
	CreatedAt pgtype.Timestamp
}

func (q *Queries) ListComments(ctx context.Context, arg ListCommentsParams) ([]ListCommentsRow, error) {
	rows, err := q.db.Query(ctx, listComments, arg.PostID, arg.CreatedAt, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListCommentsRow
	for rows.Next() {
		var i ListCommentsRow
		if err := rows.Scan(
			&i.CommentID,
			&i.Name,
			&i.Body,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPosts = `-- name: ListPosts :many
SELECT post_id, title, created_at FROM posts
WHERE created_at < $1
ORDER BY created_at DESC
LIMIT $2
`

type ListPostsParams struct {
	CreatedAt pgtype.Timestamp
	Limit     int32
}

type ListPostsRow struct {
	PostID    int64
	Title     string
	CreatedAt pgtype.Timestamp
}

func (q *Queries) ListPosts(ctx context.Context, arg ListPostsParams) ([]ListPostsRow, error) {
	rows, err := q.db.Query(ctx, listPosts, arg.CreatedAt, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListPostsRow
	for rows.Next() {
		var i ListPostsRow
		if err := rows.Scan(&i.PostID, &i.Title, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE users SET password_hash = $2 WHERE name = $1
`

type UpdateUserPasswordParams struct {
	Name         string
	PasswordHash string
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.db.Exec(ctx, updateUserPassword, arg.Name, arg.PasswordHash)
	return err
}

const createComment = `-- name: createComment :exec
INSERT INTO comments (post_id, user_id, body)
VALUES ($1, $2, $3)
`

type createCommentParams struct {
	PostID pgtype.Int8
	UserID pgtype.Int8
	Body   string
}

func (q *Queries) createComment(ctx context.Context, arg createCommentParams) error {
	_, err := q.db.Exec(ctx, createComment, arg.PostID, arg.UserID, arg.Body)
	return err
}

const createPost = `-- name: createPost :exec
WITH current_id AS (
  INSERT INTO posts (title)
  VALUES ($2) RETURNING post_id
) INSERT INTO comments (post_id, user_id, body)
  VALUES (current_id, $1, $3)
`

type createPostParams struct {
	UserID pgtype.Int8
	Title  string
	Body   string
}

func (q *Queries) createPost(ctx context.Context, arg createPostParams) error {
	_, err := q.db.Exec(ctx, createPost, arg.UserID, arg.Title, arg.Body)
	return err
}

const deleteComment = `-- name: deleteComment :exec
UPDATE comments SET body = "Comment deleted by author.", edited_at = NULL WHERE comment_id = $1
`

func (q *Queries) deleteComment(ctx context.Context, commentID int64) error {
	_, err := q.db.Exec(ctx, deleteComment, commentID)
	return err
}

const deletePost = `-- name: deletePost :exec
DELETE FROM posts WHERE post_id = $1
`

func (q *Queries) deletePost(ctx context.Context, postID int64) error {
	_, err := q.db.Exec(ctx, deletePost, postID)
	return err
}

const editComment = `-- name: editComment :exec
UPDATE comments SET body = $2, edited_at = CURRENT_TIME WHERE comment_id = $1
`

type editCommentParams struct {
	CommentID int64
	Body      string
}

func (q *Queries) editComment(ctx context.Context, arg editCommentParams) error {
	_, err := q.db.Exec(ctx, editComment, arg.CommentID, arg.Body)
	return err
}
